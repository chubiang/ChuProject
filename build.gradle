//버전 관리
def version = [
		spring: '4.3.10.RELEASE',
		servletAPI: '3.1.0',
		commonsCollections: '3.2.1',
		junit: '4.12',
		slf4j: '1.7.5'
]

List loggers = [
		"org.slf4j:slf4j-api:${slf4jVersion}",
		"org.slf4j:jcl-over-slf4j:${slf4jVersion}",
		"org.slf4j:log4j-over-slf4j:${slf4jVersion}",
		"org.slf4j:jul-to-slf4j:${slf4jVersion}",
		"ch.qos.logback:logback-core:${logbackVersion}",
		"ch.qos.logback:logback-classic:${logbackVersion}"
]

buildscript {
	ext {
		springVersion = '4.3.10.RELEASE'
		kotlin_version = '1.1.2-4'
		extraConfVersion = '2.2.+'
		slf4jVersion = '1.7.5'
		logbackVersion = '1.0.13'
		jooqVersion = "3.10.1"
		jooqPluginVersion = "2.0.9"
	}

	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		mavenCentral()
	}
	dependencies {

		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		// final인 data class의 proxy 객체를 생성 가능하도록 확장해줌
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
		classpath "com.netflix.nebula:gradle-extra-configurations-plugin:$extraConfVersion"
		// 어노테이션이 붙은 클래스에 자동으로 기본 생성자를 만들도록 해줌
		classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
		//flyway
		classpath "gradle.plugin.com.boxfuse.client:flyway-release:4.2.0"
		// https://mvnrepository.com/artifact/org.postgresql/postgresql
		classpath "org.postgresql:postgresql:42.1.4"
		//jooq
		classpath "nu.studer:gradle-jooq-plugin:2.0.9"
	}

}


group "chubiang"

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'kotlin'
apply plugin: "kotlin-allopen"
apply plugin: 'provided-base'
// Jooq plugin
apply plugin: "nu.studer.jooq"

apply plugin: 'eclipse-wtp' // 이클립스에서 구동하고 배포하기위해 플러그인 설치합니다.
// Bindings between kotlin and spring
apply plugin: 'kotlin-spring'
// Kotlin-jpa compiler plugin
apply plugin: "kotlin-jpa"
// Flyway plugin
apply plugin: "org.flywaydb.flyway"

sourceCompatibility = 1.8
targetCompatibility = 1.8

eclipse {
	// 빌드하고나면 프로젝트정보도 같이 지워지는데, Gradle프로젝트임을 인식시켜줍니다.
	project.natures "org.springsource.ide.eclipse.gradle.core.nature"
	wtp {
		facet {
			facet name: 'jst.web', version: '3.1'
			facet name: 'jst.java', version: '1.8'
		}
	}
}

jar {
	manifest {
		attributes 'Implementation-Title': 'Gradle Quickstart',
				'Implementation-Version': version
	}
}

allOpen {
	annotation "javax.persistence.Entity"
}

repositories {
	mavenLocal()
	mavenCentral()
}
dependencies {
	jooqRuntime 'postgresql:postgresql:9.1-901.jdbc4'

	//Junit
	testCompile group: 'junit', name: 'junit', version: "${version.junit}"

	// Kotlin Dependencies
	compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
	compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
	testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

	// Spring Dependencies
	providedCompile "javax.servlet:javax.servlet-api:${version.servletAPI}"
	compile "org.springframework:spring-webmvc:${version.spring}"
	compile 'org.springframework:spring-context-support:5.0.0.RELEASE'
	compile group: 'commons-collections', name: 'commons-collections', version: "${version.commonsCollections}"
	compile("javax.servlet:jstl:1.2")
	compile("javax.servlet.jsp:jsp-api:2.2")
	//Log Dependencies
	compile loggers

	// https://mvnrepository.com/artifact/org.springframework.data/spring-data-jpa
	compile group: 'org.springframework.data', name: 'spring-data-jpa', version: '1.10.5.RELEASE'
	// https://mvnrepository.com/artifact/org.hibernate/hibernate-core
	compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.10.Final'
	// https://mvnrepository.com/artifact/org.hibernate/hibernate-entitymanager
	compile group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.2.10.Final'
	// https://mvnrepository.com/artifact/org.postgresql/postgresql
	compile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
	// https://mvnrepository.com/artifact/org.flywaydb/flyway-gradle-plugin
	compile group: 'org.flywaydb', name: 'flyway-gradle-plugin', version: '4.2.0'

	// https://mvnrepository.com/artifact/org.freemarker/freemarker
	compile group: 'org.freemarker', name: 'freemarker', version: '2.3.25-incubating'
	// https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-jasper
	compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', version: '8.5.20'
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.9'
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.9'
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.0'
	// https://mvnrepository.com/artifact/org.springframework.security/spring-security-web
	compile group: 'org.springframework.security', name: 'spring-security-web', version: '4.2.3.RELEASE'
	// https://mvnrepository.com/artifact/org.springframework.security/spring-security-config
	compile group: 'org.springframework.security', name: 'spring-security-config', version: '4.2.3.RELEASE'

	//Jooq
	compile group: 'org.jooq', name: 'jooq', version: '3.10.1'
	compile group: 'org.jooq', name: 'jooq-meta', version: '3.10.1'
	compile group: 'org.jooq', name: 'jooq-codegen', version: '3.10.1'


}
// flyway 설정
ext.flywayProps = new Properties()
flywayProps.load(new FileInputStream(this.projectDir.absolutePath + "/src/main/resources/data-access.properties"))

flyway {
	url = 'jdbc:postgresql://localhost:5432/chuproject'
	driver='org.postgresql.Driver'
	user = flywayProps['dbUsername']
	password = flywayProps['dbPassword']
	locations = ['classpath:db/migration']
}

// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
jooq {
	version = '3.10.1'
	edition = 'OSS'
	sample(sourceSets.main) {
		jdbc {
			driver = 'org.postgresql.Driver'
			url = 'jdbc:postgresql://localhost:5432/chuproject'
			user = 'nana'
			password = 'nana'
		}

		generator {
			name = 'org.jooq.util.DefaultGenerator'
			strategy {
				name = 'org.jooq.util.DefaultGeneratorStrategy'
			}
			database {
				name = 'org.jooq.util.postgres.PostgresDatabase'
				inputSchema = 'public'
				forcedTypes {
					forcedType {
						name = 'varchar'
						expression = '.*'
						types = 'JSONB?'
					}
					forcedType {
						name = 'varchar'
						expression = '.*'
						types = 'INET'
					}
				}
			}

			// Watch out for this caveat when using MarkupBuilder with "reserved names"
			// - https://github.com/jOOQ/jOOQ/issues/4797
			// - http://stackoverflow.com/a/11389034/521799
			// - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
			generate {
				pojos = true
				daos = true
			}
			target {
				packageName = 'jooq'
				directory = 'src/main/jooq'
			}
		}
	}
}



configurations {
	all.collect { configuration ->
		configuration.exclude group: 'commons-logging', module: 'commons-logging'
		configuration.exclude group: 'log4j', module: 'log4j'
		configuration.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
		configuration.exclude group: 'org.slf4j', module: 'slf4j-jcl'
		configuration.exclude group: 'org.slf4j', module: 'slf4j-jdk14'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "3.5"
}
