buildscript {
	def env = { String name -> System.getProperty(name, System.getenv(name)) }

	ext.databaseHost = env("JDBC_HOST") ?: "localhost"
	ext.databasePort = env("JDBC_POST") ?: '5432'
	ext.databaseName = env("JDBC_DATABASE") ?: 'chuproject'
	ext.databaseUsername = env("JDBC_USER") ?: 'nana'
	ext.databasePassword = env("JDBC_PASSWORD") ?: '1234'
	ext.databaseUrl = "jdbc:postgresql://$databaseHost:$databasePort/$databaseName"

	println("databaseUrl : $databaseUrl")
	println("databaseUsername : $databaseUsername")
	println("databasePassword : $databasePassword")

	ext {
		springVersion = '5.0.2.RELEASE'
		servletAPI = '3.1.0'
		junitVersion = '4.12'
		kotlin_version = '1.2.0'
		slf4jVersion = '1.7.5'
		logbackVersion = '1.0.13'
		postgresqlVersion = "42.1.4"
		jooqVersion = "3.10.1"
		jooqPluginVersion = "2.0.9"
		flywayVersion = "4.2.0"
	}

	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		mavenCentral()
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		// final인 data class의 proxy 객체를 생성 가능하도록 확장해줌
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
		// 어노테이션이 붙은 클래스에 자동으로 기본 생성자를 만들도록 해줌
		classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
		classpath group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
		classpath 'gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.8'
		classpath "org.zeroturnaround:gradle-jrebel-plugin:1.1.7"
	}
}

plugins {
	id "org.jetbrains.kotlin.plugin.spring" version "1.2.0"
	id 'de.fuerstenau.buildconfig' version '1.1.8'
	id "org.zeroturnaround.gradle.jrebel" version "1.1.7"
	id "org.flywaydb.flyway" version "4.2.0"
	id 'nu.studer.jooq' version '2.0.9'
	id "org.jetbrains.kotlin.plugin.jpa" version "1.2.0"
	id 'net.ltgt.apt' version '0.10'
}

group "chubiang"
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'application'

apply plugin: 'eclipse-wtp' // 이클립스에서 구동하고 배포하기위해 플러그인 설치합니다.

mainClassName = 'chubiang.Application'	// tomcat application 위치 설정 Application이 class명

// 자바 jvm 컴파일 버전
sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

// 코틀린 jvm 컴파일 버전
compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

List loggers = [
		"org.slf4j:slf4j-api:$slf4jVersion",
		"org.slf4j:jcl-over-slf4j:$slf4jVersion",
		"org.slf4j:log4j-over-slf4j:$slf4jVersion",
		"org.slf4j:jul-to-slf4j:$slf4jVersion",
		"ch.qos.logback:logback-core:$logbackVersion",
		"ch.qos.logback:logback-classic:$logbackVersion"
]

eclipse {
	// 빌드하고나면 프로젝트정보도 같이 지워지는데, Gradle프로젝트임을 인식시켜줍니다.
	project.natures "org.springsource.ide.eclipse.gradle.core.nature"
	wtp {
		facet {
			facet name: 'jst.web', version: '3.1'
			facet name: 'jst.java', version: '1.8'
		}
	}
}

jar {
	manifest {
		attributes 'Implementation-Title': 'Gradle Quickstart',
				'Implementation-Version': version
	}
}

allOpen {
	//for jpa
	annotation "javax.persistence.Entity"
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	jooqRuntime "org.postgresql:postgresql:$postgresqlVersion"
	compileOnly 'org.projectlombok:lombok:1.16.18'
	apt "org.projectlombok:lombok:1.16.18"

	//Junit
	testCompile group: 'junit', name: 'junit', version: "$junitVersion"
	testCompile group: 'org.springframework', name: 'spring-test', version: "$springVersion"
	testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'

	// Kotlin Dependencies
	compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
	compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
	testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

	// Spring Dependencies
//	providedCompile "javax.servlet:javax.servlet-api:$servletAPI" //임베디드 톰캣 사용 시, 기본으로 들어가 있어서 안해도됨

	compile "org.springframework:spring-webmvc:$springVersion"
	compile group: 'org.springframework', name: 'spring-jdbc', version: "$springVersion"
	compile group: 'org.springframework', name: 'spring-tx', version: "$springVersion"
	compile "org.springframework:spring-context-support:$springVersion"

	compile "javax.servlet:jstl:1.2"

	compile "javax.servlet.jsp:jsp-api:2.2"

	compile group: 'org.springframework.data', name: 'spring-data-jpa', version: '1.10.5.RELEASE'

	compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.10.Final'
	compile group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.2.10.Final'

	compile group: 'org.postgresql', name: 'postgresql', version: "$postgresqlVersion"

	compile group: 'org.flywaydb', name: 'flyway-gradle-plugin', version: '4.2.0'

	compile group: 'org.freemarker', name: 'freemarker', version: '2.3.25-incubating'

	compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', version: '8.5.20'

	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.2'

	compile group: 'org.springframework.security', name: 'spring-security-web', version: '4.2.3.RELEASE'
	compile group: 'org.springframework.security', name: 'spring-security-config', version: '4.2.3.RELEASE'

    compile group: 'javax.validation', name: 'validation-api', version: '2.0.0.Final'
    compile group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.0.5.Final'


    // jooq
	compile group: 'org.jooq', name: 'jooq', version: '3.10.1'
	compile group: 'org.jooq', name: 'jooq-meta', version: '3.10.1'
	compile group: 'org.jooq', name: 'jooq-codegen', version: '3.10.1'

	// https://mvnrepository.com/artifact/com.zaxxer/HikariCP
	compile group: 'com.zaxxer', name: 'HikariCP', version: '2.7.4'

	//Log Dependencies
	compile loggers

}

buildConfig {
	appName = project.name
	version = project.version
	clsName = 'BuildConfig'
	packageName = 'chuproject'
	charset = 'UTF-8'

	buildConfigField 'String', 'DRIVER_CLASS_NAME', 'org.postgresql.Driver'
	buildConfigField 'String', 'JDBC_URL', databaseUrl
	buildConfigField 'String', 'JDBC_USERNAME', databaseUsername
	buildConfigField 'String', 'JDBC_PASSWORD', databasePassword
}

// flyway 설정
ext.extProps = new Properties()
extProps.load(file("src/main/resources/data-access.properties").newReader())

flyway {
	url = databaseUrl
	user = databaseName
	password = databasePassword
	// mac os에서는 안써줌
	//locations = ['classpath:db/migration']
	encoding = 'UTF-8'
}

// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
jooq {
	version = '3.10.1'
	edition = 'OSS'
	sample(sourceSets.main) {
		jdbc {
			driver = 'org.postgresql.Driver'
			url = databaseUrl
			user = databaseUsername
			password = databasePassword
		}

		generator {
			name = 'org.jooq.util.DefaultGenerator'
			strategy {
				name = 'org.jooq.util.DefaultGeneratorStrategy'
			}
			database {
				name = 'org.jooq.util.postgres.PostgresDatabase'
				inputSchema = 'public'
				includes = '.*'
				forcedTypes {
					forcedType {
						name = 'varchar'
						expression = '.*'
						types = 'JSONB?'
					}
				}
			}

			// Watch out for this caveat when using MarkupBuilder with "reserved names"
			// - https://github.com/jOOQ/jOOQ/issues/4797
			// - http://stackoverflow.com/a/11389034/521799
			// - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
			generate {
				relations = true
				deprecated = false
				records = true
				immutablePojos = true
				fluentSetters = true
				javaTimeTypes = true
			}
			target {
				packageName = 'jooq.model'
			}
		}
	}
}

configurations {
	all.collect { configuration ->
		configuration.exclude group: 'commons-logging', module: 'commons-logging'
		configuration.exclude group: 'log4j', module: 'log4j'
		configuration.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
		configuration.exclude group: 'org.slf4j', module: 'slf4j-jcl'
		configuration.exclude group: 'org.slf4j', module: 'slf4j-jdk14'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "3.5"
}

rebel {
	alwaysGenerate = true
	showGenerated = true
	rootPath = "/Users/chubiang/Documents/project/chuProject"
	classpath {
		resource {
			directory = "/out/production/classes/chubiang"
		}

		resource {
			directory = "/out/production/resources"
		}
	}
	web {
		resource {
			directory = "/src/main/webapp/resources"
			target = "/src/main/webapp/WEB-INF/views"
		}
	}
}
